#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>

using namespace std;  

class NavetteStade {
private:
    mutex mtx;                            // Mutex to protect access to state variables
    condition_variable cv;                // Condition variable to synchronize threads
    int supportersPSG = 0;                // Total number of PSG supporters waiting
    int supportersOM = 0;                 // Total number of OM supporters waiting
    int boarded_PSG = 0;                  // Number of PSG supporters currently on board
    int boarded_OM = 0;                   // Number of OM supporters currently on board

public:
    void monter(bool estPSG) {
        unique_lock<mutex> lock(mtx);

        if (estPSG) {
            supportersPSG++;
        } else {
            supportersOM++;
        }

        // Wait until it's safe to board
        cv.wait(lock, [&]() {
            return ((supportersPSG == 4) || (supportersOM == 4) ||
                    (supportersPSG == 2 && supportersOM == 2 &&
                     boarded_PSG + boarded_OM == 0));
        });

        cout << estPSG << " : " << boarded_PSG << " : " << boarded_OM << "\n";

        if (estPSG && ((boarded_PSG == 0 && boarded_OM <= 2) || boarded_PSG == 1 || boarded_PSG == 3 || (boarded_PSG == 2 && boarded_OM == 0))) {
            supportersPSG--;
            boarded_PSG++;
            cout << "A PSG supporter boards.\n";
        } else if (!estPSG && ((boarded_OM == 0 && boarded_PSG <= 2) || boarded_OM == 1 || boarded_OM == 3 || (boarded_OM == 2 && boarded_PSG == 0))) {
            supportersOM--;
            boarded_OM++;
            cout << "An OM supporter boards.\n";
        }

        // If the shuttle is full, reset the counters and navigate
        if (boarded_PSG + boarded_OM == 4) {
            naviguer();
            boarded_PSG = 0;
            boarded_OM = 0;
            cv.notify_all();
        }
    }

    void naviguer() {
        cout << "The shuttle departs for the stadium!\n\n";
    }
};

void tachePSG(NavetteStade& ns) {
    ns.monter(true);
}

void tacheOM(NavetteStade& ns) {
    ns.monter(false);
}

int main() {
    NavetteStade ns;

    thread psgSupporters[40];
    thread omSupporters[40];

    // Create 20 threads for PSG supporters and 20 for OM supporters
    for (int i = 0; i < 40; i++) {
        psgSupporters[i] = thread(tachePSG, ref(ns));
        omSupporters[i] = thread(tacheOM, ref(ns));
    }

    // Wait for all threads to finish
    for (int i = 0; i < 40; i++) {
        psgSupporters[i].join();
        omSupporters[i].join();
    }

    return 0;
}
